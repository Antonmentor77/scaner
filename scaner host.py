import platform
import psutil
import socket
import subprocess
import os
import re


def get_system_info():
    """–°–æ–±–∏—Ä–∞–µ—Ç –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ."""
    print("=" * 60)
    print("üîç –°–ö–ê–ù–ï–† –í–ò–†–¢–£–ê–õ–¨–ù–´–• –ú–ê–®–ò–ù –ò LINUX –°–ò–°–¢–ï–ú")
    print("=" * 60)

    print("\n--- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –°–∏—Å—Ç–µ–º–µ ---")
    print(f"üíª –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {platform.system()} {platform.release()}")
    print(f"üèóÔ∏è  –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {platform.architecture()[0]}")
    print(f"üè∑Ô∏è  –ò–º—è –ö–æ–º–ø—å—é—Ç–µ—Ä–∞: {platform.node()}")
    print(f"‚öôÔ∏è  –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: {platform.processor()}")
    print(f"üêç –í–µ—Ä—Å–∏—è Python: {platform.python_version()}")


def detect_linux_mint():
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ Linux Mint –∏ –¥—Ä—É–≥–∏—Ö –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–æ–≤."""
    print("\n" + "=" * 60)
    print("üêß –ü–û–ò–°–ö LINUX MINT –ò –î–†–£–ì–ò–• –î–ò–°–¢–†–ò–ë–£–¢–ò–í–û–í")
    print("=" * 60)

    linux_found = False

    # –ú–µ—Ç–æ–¥ 1: –ü–æ–∏—Å–∫ –≤ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ Linux Mint
    print("\nüîç –ú–µ—Ç–æ–¥ 1: –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Linux...")
    linux_processes = {
        'mint': 'Linux Mint',
        'ubuntu': 'Ubuntu',
        'debian': 'Debian',
        'kali': 'Kali Linux',
        'fedora': 'Fedora',
        'centos': 'CentOS',
        'arch': 'Arch Linux',
        'gnome': 'GNOME (Linux)',
        'kde': 'KDE (Linux)',
        'xfce': 'XFCE (Linux)',
        'cinnamon': 'Cinnamon (Linux Mint)',
    }

    for proc in psutil.process_iter(['name', 'exe', 'cmdline']):
        try:
            proc_name = proc.info['name'].lower() if proc.info['name'] else ''
            cmdline = ' '.join(proc.info['cmdline'] or []).lower()

            for key, distro in linux_processes.items():
                if key in proc_name or key in cmdline:
                    print(f"   ‚úÖ –û–ë–ù–ê–†–£–ñ–ï–ù: {distro}")
                    print(f"      –ü—Ä–æ—Ü–µ—Å—Å: {proc.info['name']} (PID: {proc.pid})")
                    if proc.info['cmdline']:
                        print(f"      –ö–æ–º–∞–Ω–¥–∞: {' '.join(proc.info['cmdline'][:3])}...")
                    linux_found = True

        except (psutil.NoSuchProcess, psutil.AccessDenied):
            pass

    # –ú–µ—Ç–æ–¥ 2: –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫ Linux Mint
    print("\nüîç –ú–µ—Ç–æ–¥ 2: –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ Linux...")
    linux_paths = [
        r"C:\Program Files\VirtualBox\HardDisks",
        r"C:\Users\{}\VirtualBox VMs".format(os.getenv('USERNAME')),
        r"C:\Users\{}\vmware".format(os.getenv('USERNAME')),
        r"C:\linux",
        r"C:\mint",
        r"C:\ubuntu",
    ]

    for path in linux_paths:
        if os.path.exists(path):
            print(f"   ‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø—É—Ç—å Linux/VM: {path}")
            # –ò—â–µ–º .vdi, .vmdk —Ñ–∞–π–ª—ã
            try:
                for root, dirs, files in os.walk(path):
                    for file in files:
                        if any(keyword in file.lower() for keyword in ['mint', 'linux', 'ubuntu', 'debian']):
                            print(f"      –§–∞–π–ª: {os.path.join(root, file)}")
                            linux_found = True
            except:
                pass

    # –ú–µ—Ç–æ–¥ 3: –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ VirtualBox
    print("\nüîç –ú–µ—Ç–æ–¥ 3: –ü–æ–∏—Å–∫ Linux –≤ VirtualBox...")
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –í–ú
        result = subprocess.run([
            'VBoxManage', 'list', 'vms'
        ], capture_output=True, text=True, timeout=10)

        if result.returncode == 0:
            linux_vms = []
            for line in result.stdout.split('\n'):
                if any(keyword in line.lower() for keyword in ['mint', 'linux', 'ubuntu', 'debian', 'kali']):
                    linux_vms.append(line.strip())
                    linux_found = True

            if linux_vms:
                print("   ‚úÖ Linux –í–ú –≤ VirtualBox:")
                for vm in linux_vms:
                    print(f"      üñ•Ô∏è  {vm}")
            else:
                print("   ‚ùå Linux –í–ú –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ VirtualBox")

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ VirtualBox: {e}")

    # –ú–µ—Ç–æ–¥ 4: –ü–æ–∏—Å–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö Linux –í–ú
    print("\nüîç –ú–µ—Ç–æ–¥ 4: –ü–æ–∏—Å–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö Linux –í–ú...")
    try:
        result = subprocess.run([
            'VBoxManage', 'list', 'runningvms'
        ], capture_output=True, text=True, timeout=10)

        if result.returncode == 0 and result.stdout.strip():
            running_vms = []
            for line in result.stdout.split('\n'):
                if any(keyword in line.lower() for keyword in ['mint', 'linux', 'ubuntu', 'debian']):
                    running_vms.append(line.strip())
                    linux_found = True

            if running_vms:
                print("   ‚úÖ –ó–ê–ü–£–©–ï–ù–ù–´–ï Linux –í–ú:")
                for vm in running_vms:
                    print(f"      üöÄ {vm}")

                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ –∑–∞–ø—É—â–µ–Ω–Ω–æ–π –í–ú
                    vm_name = vm.split('{')[0].strip().strip('"')
                    try:
                        result = subprocess.run([
                            'VBoxManage', 'guestproperty', 'enumerate', vm_name
                        ], capture_output=True, text=True, timeout=10)

                        if result.returncode == 0:
                            for prop_line in result.stdout.split('\n'):
                                if 'OSType' in prop_line:
                                    print(f"         {prop_line.strip()}")
                                    break
                    except:
                        pass
            else:
                print("   ‚ùå –ó–∞–ø—É—â–µ–Ω–Ω—ã—Ö Linux –í–ú –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –í–ú: {e}")

    # –ú–µ—Ç–æ–¥ 5: –ê–Ω–∞–ª–∏–∑ —Å–µ—Ç–µ–≤—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ Linux
    print("\nüîç –ú–µ—Ç–æ–¥ 5: –ê–Ω–∞–ª–∏–∑ —Å–µ—Ç–µ–≤—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç–µ–≤—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º Linux –ø–æ—Ä—Ç–∞–º
        linux_ports = [22,  # SSH
                       80,  # HTTP
                       443,  # HTTPS
                       3306,  # MySQL
                       5432]  # PostgreSQL

        for conn in psutil.net_connections():
            if conn.status == 'ESTABLISHED' and conn.raddr:
                if conn.raddr.port in linux_ports:
                    print(f"   üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Linux-–ø–æ—Ä—Ç—É {conn.raddr.port} –Ω–∞ {conn.raddr.ip}")
                    linux_found = True

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–µ—Ç–µ–≤—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {e}")

    # –ú–µ—Ç–æ–¥ 6: –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ —Ä–µ–µ—Å—Ç—Ä (–¥–ª—è WSL2 —Å Linux Mint)
    print("\nüîç –ú–µ—Ç–æ–¥ 6: –ü–æ–∏—Å–∫ –≤ —Ä–µ–µ—Å—Ç—Ä–µ...")
    try:
        result = subprocess.run([
            'reg', 'query', 'HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Lxss', '/s'
        ], capture_output=True, text=True, timeout=10)

        if result.returncode == 0:
            for line in result.stdout.split('\n'):
                if any(keyword in line.lower() for keyword in ['mint', 'ubuntu', 'debian']):
                    print(f"   ‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤ —Ä–µ–µ—Å—Ç—Ä–µ: {line.strip()}")
                    linux_found = True

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ —Ä–µ–µ—Å—Ç—Ä–µ: {e}")

    # –ò—Ç–æ–≥ –ø–æ–∏—Å–∫–∞ Linux Mint
    print("\n" + "=" * 60)
    if linux_found:
        print("üéØ LINUX –°–ò–°–¢–ï–ú–´ –û–ë–ù–ê–†–£–ñ–ï–ù–´!")
    else:
        print("‚ùå Linux Mint –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω")
        print("\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   - Linux Mint –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("   - –í–ú —Å Linux Mint –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞")
        print("   - Linux Mint —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –¥—Ä—É–≥–æ–π —Å–∏—Å—Ç–µ–º–µ")
        print("   - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–æ–µ –∏–º—è –¥–ª—è –í–ú")


def get_linux_mint_details():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Linux Mint –µ—Å–ª–∏ –æ–Ω –Ω–∞–π–¥–µ–Ω"""
    print("\n" + "=" * 60)
    print("üçÉ –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û LINUX MINT")
    print("=" * 60)

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –í–ú —Å Linux Mint –≤ VirtualBox
        result = subprocess.run([
            'VBoxManage', 'list', 'vms'
        ], capture_output=True, text=True, timeout=10)

        mint_vms = []
        if result.returncode == 0:
            for line in result.stdout.split('\n'):
                if 'mint' in line.lower():
                    mint_vms.append(line.strip())

        if mint_vms:
            print("‚úÖ –í–ò–†–¢–£–ê–õ–¨–ù–´–ï –ú–ê–®–ò–ù–´ LINUX MINT:")
            for vm_info in mint_vms:
                print(f"   üñ•Ô∏è  {vm_info}")

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –í–ú
                vm_name = vm_info.split('{')[0].strip().strip('"')

                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –í–ú
                print(f"\n   üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –í–ú '{vm_name}':")

                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –û–°
                try:
                    result = subprocess.run([
                        'VBoxManage', 'showvminfo', vm_name, '--machinereadable'
                    ], capture_output=True, text=True, timeout=10)

                    if result.returncode == 0:
                        for line in result.stdout.split('\n'):
                            if 'ostype=' in line:
                                print(f"      –û–°: {line.split('=')[1].strip('\"')}")
                            elif 'memory=' in line:
                                memory_mb = line.split('=')[1].strip('\"')
                                print(f"      –ü–∞–º—è—Ç—å: {memory_mb} MB")
                            elif 'cpus=' in line:
                                cpus = line.split('=')[1].strip('\"')
                                print(f"      –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã: {cpus}")
                except Exception as e:
                    print(f"      ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ –í–ú
                try:
                    result = subprocess.run([
                        'VBoxManage', 'list', 'runningvms'
                    ], capture_output=True, text=True, timeout=10)

                    if vm_name in result.stdout:
                        print("      üü¢ –°—Ç–∞—Ç—É—Å: –ó–ê–ü–£–©–ï–ù–ê")

                        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å IP –∞–¥—Ä–µ—Å –∑–∞–ø—É—â–µ–Ω–Ω–æ–π –í–ú
                        try:
                            result = subprocess.run([
                                'VBoxManage', 'guestproperty', 'get', vm_name, '/VirtualBox/GuestInfo/Net/0/V4/IP'
                            ], capture_output=True, text=True, timeout=10)

                            if result.returncode == 0 and 'Value:' in result.stdout:
                                ip = result.stdout.split('Value:')[1].strip()
                                if ip and ip != 'No value set!':
                                    print(f"      üåê IP –∞–¥—Ä–µ—Å: {ip}")
                        except:
                            pass
                    else:
                        print("      üî¥ –°—Ç–∞—Ç—É—Å: –û–°–¢–ê–ù–û–í–õ–ï–ù–ê")
                except:
                    pass

        else:
            print("‚ùå –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã Linux Mint –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ VirtualBox")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π: {e}")


def detect_virtualization():
    """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏."""
    print("\n" + "=" * 60)
    print("üñ•Ô∏è  –ü–û–ò–°–ö –í–ò–†–¢–£–ê–õ–¨–ù–´–• –ú–ê–®–ò–ù")
    print("=" * 60)

    # ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ detect_virtualization –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    # –¢–æ—Ç –∂–µ –∫–æ–¥ —á—Ç–æ –±—ã–ª —Ä–∞–Ω—å—à–µ


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    try:
        get_system_info()
        detect_virtualization()

        # –î–û–ë–ê–í–õ–Ø–ï–ú –ü–û–ò–°–ö LINUX MINT
        detect_linux_mint()
        get_linux_mint_details()

        print("\n" + "=" * 60)
        print("‚úÖ –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
        print("=" * 60)

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")


if __name__ == "__main__":
    main()